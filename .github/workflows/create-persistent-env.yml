name: Persistent Environment Creation
on:
  workflow_call:
    inputs:
      service:
        required: true
        type: string
      container_name:
        required: true
        type: string
			cluster:
        required: true
        type: string
      exist:
        required: true
        type: boolean

jobs:
  Create:
    if: ${{ inputs.exist }} == 'false'
    runs-on: ubuntu-latest
    env:
      SERVICE: ${{ inputs.service }}
      CONTAINER_NAME: ${{ inputs.container_name }}
      CLUSTER: ${{ inputs.cluster }}
    
    steps:
      - name: Checkout
        if: env.ENV_EXIST == 'false'
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Setup Terraform
        if: env.ENV_EXIST == 'false'
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false
      
      - name: Terraform Format
        if: env.ENV_EXIST == 'false'
        working-directory: ./ci/terraform/environment
        id: fmt
        run: terraform fmt -check

      - name: Configure AWS credentials for use
        if: env.ENV_EXIST == 'false'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.GROMIT_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.GROMIT_AWS_SECRET_ACCESS_KEY }}
          aws-region: "eu-central-1"

      - name: Terraform Init
        if: env.ENV_EXIST == 'false'
        working-directory: ./ci/terraform/environment
        id: init
        run: terraform init

      - name: Terraform Workspace
        if: env.ENV_EXIST == 'false'
        working-directory: ./ci/terraform/environment
        run: |
          terraform workspace new ${CLUSTER}
          terraform workspace show

      - name: Lock environment
        if: env.ENV_EXIST == 'false'
        run:
          echo "CALL - Add entry on DinamoDB"

      - name: Terraform Apply
        if: env.ENV_EXIST == 'false'
        working-directory: ./ci/terraform/environment
        run: terraform apply -auto-approve -var-file=master.tfvars

      - name: Unlock environment
        if: env.ENV_EXIST == 'false'
        run:
          echo "CALL - Update entry on DinamoDB"