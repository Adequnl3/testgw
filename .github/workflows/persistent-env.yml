name: Persistent Environment
on:
  pull_request:

env:
  SERVICE: "tyk"
  CONTAINER_NAME: "tyk"
  CLUSTER: "kikitest"
  REGISTRY: "754489498669.dkr.ecr.eu-central-1.amazonaws.com"
  IMAGE: "tyk:v4.0.0"
  ENV_EXIST: false

jobs:
  Create:
    if: ${{ ENV_EXIST }} != true
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false
      
      - name: Terraform Format
        working-directory: ./ci/terraform/environment
        id: fmt
        run: terraform fmt -check

      - name: Configure AWS credentials for use
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.GROMIT_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.GROMIT_AWS_SECRET_ACCESS_KEY }}
          aws-region: "eu-central-1"

      - name: Terraform Init
        working-directory: ./ci/terraform/environment
        id: init
        run: terraform init

      - name: Terraform Workspace
        working-directory: ./ci/terraform/environment
        run: |
          terraform workspace new ${CLUSTER}
          terraform workspace show

      - name: Lock environment
        run:
          echo "CALL - Add entry on DinamoDB"

      - name: Terraform Apply
        working-directory: ./ci/terraform/environment
        run: terraform apply -auto-approve -var-file=master.tfvars

      - name: Unlock environment
        run:
          echo "CALL - Update entry on DinamoDB"


  Update:
    if: ${{ ENV_EXIST }}
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS credentials for use
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.GROMIT_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.GROMIT_AWS_SECRET_ACCESS_KEY }}
          aws-region: "eu-central-1"

      - name: Download task definition
        working-directory: ./ci/terraform/environment
        run: |
          aws ecs describe-task-definition --task-definition ${CONTAINER_NAME}-${CLUSTER}-template --query taskDefinition > task-definition.json

      - name: Describe task definition
        working-directory: ./ci/terraform/environment
        run: cat task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1.1.1
        with:
          task-definition: ./ci/terraform/environment/task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ env.REGISTRY }}/${{ env.IMAGE }}

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1.4.9
        with:
          task-definition: ./ci/terraform/environment/task-definition.json
          service: ${{ env.SERVICE }}
          cluster: ${{ env.CLUSTER }}
          wait-for-service-stability: true